/// 列表：创建、释放、插入头部、插入尾部、删除、遍历、获取元素的可变权限
/// 
/// `问题`
/// 1.引用、（裸）指针、智能指针，三者的区别是什么？特性和适用场景又分别是什么？
///
/// `方案1`
/// 设计过的“指针”
/// Box：分配堆上的空间，Option：可能是空指针
/// 打算用 Box 的 into_raw 和 from_raw 来获取可变权限，不过这样太麻烦了
///
/// `方案2`
/// 定义一个引用字段
/// 这应该是最基本的思路：通过引用来访问变量，而不是获取所有权，另外要是可变引用
/// 假设 prev: Option<&node>，这样只能拿到不可变引用，没法进行修改
/// 又或者，prev: Option<&mut node> ❌ 声明是不合理的，只能在取引用的时候声明可变
pub struct List {

}